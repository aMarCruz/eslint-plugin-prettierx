{
  "arrowParens": {
    "description": "Include parentheses around a sole arrow function parameter.",
    "oneOf": [
      {
        "enum": ["avoid"],
        "description": "Omit parens when possible. Example: `x => x`"
      },
      {
        "enum": ["always"],
        "description": "Always include parens. Example: `(x) => x`"
      }
    ]
  },
  "bracketSpacing": {
    "description": "Print spaces between brackets.",
    "type": "boolean"
  },
  "endOfLine": {
    "description": "Which end of line characters to apply.",
    "oneOf": [
      {
        "enum": ["auto"],
        "description": "Maintain existing\n(mixed values within one file are normalised by looking at what's used after the first line)"
      },
      {
        "enum": ["lf"],
        "description": "Line Feed only (\\n), common on Linux and macOS as well as inside git repos"
      },
      {
        "enum": ["crlf"],
        "description": "Carriage Return + Line Feed characters (\\r\\n), common on Windows"
      },
      {
        "enum": ["cr"],
        "description": "Carriage Return character only (\\r), used very rarely"
      }
    ]
  },
  "htmlWhitespaceSensitivity": {
    "description": "How to handle whitespaces in HTML.",
    "oneOf": [
      {
        "enum": ["css"],
        "description": "Respect the default value of CSS display property."
      },
      {
        "enum": ["strict"],
        "description": "Whitespaces are considered sensitive."
      },
      {
        "enum": ["ignore"],
        "description": "Whitespaces are considered insensitive."
      }
    ]
  },
  "insertPragma": {
    "description": "Insert @format pragma into file's first docblock comment.",
    "type": "boolean"
  },
  "jsxBracketSameLine": {
    "description": "Put > on the last line instead of at a new line.",
    "type": "boolean"
  },
  "jsxSingleQuote": {
    "description": "Use single quotes in JSX.",
    "type": "boolean"
  },
  "parser": {
    "description": "Which parser to use.",
    "oneOf": [
      { "enum": ["flow"], "description": "Flow" },
      { "enum": ["babel"], "description": "JavaScript" },
      { "enum": ["babel-flow"], "description": "Flow" },
      { "enum": ["typescript"], "description": "TypeScript" },
      { "enum": ["css"], "description": "CSS" },
      { "enum": ["less"], "description": "Less" },
      { "enum": ["scss"], "description": "SCSS" },
      { "enum": ["json"], "description": "JSON" },
      { "enum": ["json5"], "description": "JSON5" },
      { "enum": ["json-stringify"], "description": "JSON.stringify" },
      { "enum": ["graphql"], "description": "GraphQL" },
      { "enum": ["markdown"], "description": "Markdown" },
      { "enum": ["mdx"], "description": "MDX" },
      { "enum": ["vue"], "description": "Vue" },
      { "enum": ["yaml"], "description": "YAML" },
      { "enum": ["html"], "description": "HTML" },
      { "enum": ["angular"], "description": "Angular" }
    ]
  },
  "printWidth": {
    "description": "The line length where Prettier will try wrap.",
    "type": "integer"
  },
  "proseWrap": {
    "description": "How to wrap prose.",
    "oneOf": [
      {
        "enum": ["always"],
        "description": "Wrap prose if it exceeds the print width."
      },
      { "enum": ["never"], "description": "Do not wrap prose." },
      { "enum": ["preserve"], "description": "Wrap prose as-is." }
    ]
  },
  "quoteProps": {
    "description": "Change when properties in objects are quoted.",
    "default": "as-needed",
    "oneOf": [
      {
        "enum": ["as-needed"],
        "description": "Only add quotes around object properties where required."
      },
      {
        "enum": ["consistent"],
        "description": "If at least one property in an object requires quotes, quote all properties."
      },
      {
        "enum": ["preserve"],
        "description": "Respect the input use of quotes in object properties."
      }
    ]
  },
  "requirePragma": {
    "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
    "type": "boolean"
  },
  "semi": {
    "description": "Print semicolons.",
    "type": "boolean"
  },
  "singleQuote": {
    "description": "Use single quotes instead of double quotes.",
    "type": "boolean"
  },
  "tabWidth": {
    "description": "Number of spaces per indentation level.",
    "type": "integer"
  },
  "trailingComma": {
    "description": "Print trailing commas wherever possible when multi-line.",
    "oneOf": [
      { "enum": ["none"], "description": "No trailing commas." },
      {
        "enum": ["es5"],
        "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)"
      },
      {
        "enum": ["all"],
        "description": "Trailing commas wherever possible (including function arguments)."
      }
    ]
  },
  "useTabs": {
    "description": "Indent with tabs instead of spaces.",
    "type": "boolean"
  }
}
